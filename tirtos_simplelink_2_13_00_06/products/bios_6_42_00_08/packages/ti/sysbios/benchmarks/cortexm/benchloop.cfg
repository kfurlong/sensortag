var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Main = xdc.useModule('xdc.runtime.Main');
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');
var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Timestamp = xdc.useModule('xdc.runtime.Timestamp');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Error = xdc.useModule('xdc.runtime.Error');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');

/* Disable loading text to reduce program size */
Program.argSize = 0x0;
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
Defaults.common$.namedModule = false;
System.maxAtexitHandlers = 4;
Error.raiseHook = null;
Text.isLoaded = false;

/* Setup Global memory config */
Program.stack = 512;
BIOS.heapSize = 1024;

var HWI_INT = 13;

/* Configure platform specific settings */
if (Program.build.target.name == "M0") {
    HWI_INT = 17;
}

if ((Program.build.target.name == "M3") ||
    (Program.build.target.name == "M4") ||
    (Program.build.target.name == "M4F")) {
    var Boot = xdc.useModule('ti.catalog.arm.cortexm4.tiva.ce.Boot');
    Boot.sysClockDiv = Boot.SYSDIV_5; /* 40 MHz */
    BIOS.cpuFreq.lo = 40000000;
    HWI_INT = 17;
}

/* Configure text output */
System.SupportProxy = SysMin;
SysMin.flushAtExit = true;
SysMin.bufSize = 2048;

/* Clean up SYS/BIOS by removing text */
BIOS.libType = BIOS.LibType_Custom;
BIOS.logsEnabled = false;
BIOS.assertsEnabled = false;
BIOS.customCCOpts = BIOS.customCCOpts.replace(" -g ","");
BIOS.customCCOpts = BIOS.customCCOpts.replace("--optimize_with_debug","");
print(BIOS.customCCOpts);

/* Disable Clock */
BIOS.clockEnabled = false;
Clock.tickSource = Clock.TickSource_NULL;
Clock.swiPriority = 1;

/* Configure Tasks */
Task.enableIdleTask = false;
Task.initStackFlag = false;
Task.defaultStackSize = 512;
Task.checkStackFlag = false;

/* Configure Hwi's */
Hwi.initStackFlag = true;

/*  Tasks */
var task1Params = new Task.Params();
task1Params.instance.name = "benchmarkHandle";
task1Params.priority = 2;
task1Params.stackSize = 768;
Program.global.benchmarkHandle = Task.create("&benchmarkTask", task1Params);
var task2Params = new Task.Params();
task2Params.instance.name = "task1";
task2Params.priority = 2;
task2Params.stackSize = 512;
Program.global.task1 = Task.create("&task1Func", task2Params);

/*  Semaphores */
var semaphore0Params = new Semaphore.Params();
semaphore0Params.instance.name = "sema1";
Program.global.sema1 = Semaphore.create(null, semaphore0Params);
var semaphore1Params = new Semaphore.Params();
semaphore1Params.instance.name = "sema2";
Program.global.sema2 = Semaphore.create(null, semaphore1Params);

/*  Swis */
var swi1Params = new Swi.Params();
swi1Params.instance.name = "swi1";
swi1Params.priority = 1;
Program.global.swi1 = Swi.create("&swi1Func", swi1Params);
var swi2Params = new Swi.Params();
swi2Params.instance.name = "swi2";
swi2Params.priority = 2;
Program.global.swi2 = Swi.create("&swi2Func", swi2Params);

/*  Hwis */
var hwi0Params = new Hwi.Params();
hwi0Params.instance.name = "hwi1";
Program.global.hwi1 = Hwi.create(HWI_INT, "&genericHwiFunc", hwi0Params);
