%%{
/*
 * Copyright (c) 2015, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
%%}
%%{
    var File = xdc.module("xdc.services.io.File");

    var BIOS = xdc.module("ti.sysbios.BIOS");

    var Build = xdc.module("ti.sysbios.Build");

    var ROM = xdc.module("ti.sysbios.rom.ROM");

    var TARGET = $args[0];

    var XDCROOT = String(environment['xdc.rootDir'] + '/packages/').replace(/\\/g, "/");

    var XDCRUNTIME = xdc.loadPackage('xdc.runtime').packageRepository;
    
    var CGEN = TARGET.rootDir.replace(/\\/g, "/");
    
    var BIOSROOT = File.getDOSPath(BIOS.$package.packageRepository) + "ti/sysbios/"

    var sourcesLIB = Build.getCFiles(TARGET.$name).split(' ');

    function srcName(path) {
	if (path.substring(0,4) == "xdc/") {
	    return (XDCRUNTIME + path);
	} else if (path.substring(0,2) == "./") {
	    return(path);
	} else if (path.substring(0,1) == "/") {
	    return(path);
	} else if (path.substring(1,2) == ":") {
	    return(path);
	} else {
	    return (BIOSROOT + path);
	}
    }

    function baseName(path) {
	return (path.substr(path.lastIndexOf('/') + 1).replace(/\.[^\.]+$/, ""));
    }

    function packageName(path) {
	var dirpath = path.substring(0, path.lastIndexOf('/'));
	var begin = dirpath.substring(0, dirpath.lastIndexOf('/'));
	if (begin.length != 0) {
	    dirpath = begin + "_" + dirpath.substr(dirpath.lastIndexOf('/')+1);
	}
	return (dirpath.substr(dirpath.lastIndexOf('/') + 1));
    }
    
    function packageDir(path) {
	return (path.substring(0, path.lastIndexOf('/')));
    }

    function copy(src, dst) {
        var ins = new java.io.FileInputStream(src);
        var outs = new java.io.FileOutputStream(dst);
        if (ins != null && outs != null) {
            var inc = ins.getChannel();
            var outc = outs.getChannel();
            inc.transferTo(0, inc.size(), outc);
            inc.close();
            outc.close();
        }
        ins.close();
        outs.close();
    }

    function fileToString(filename) {
        var line, idx = 0;
        var lineArr = new Array();

        /* Open file */
        var file = new java.io.BufferedReader(new java.io.FileReader(filename));

        /* Read file */
        while ((line = file.readLine()) != null) {
            lineArr[idx++] = line;
        }
        
        return String(lineArr.join("|"));
    }
    
    var ROMASMOBJS = [];
    var ROMPPS = [];
    var LIBASMOBJS = [];
    var LIBOBJS = [];
    var LIBPPS = [];

    var TestName = xdc.module("xdc.cfg.Program").name.substring(0, Program.name.lastIndexOf('.'));

    var RomModule = this;

    var BIOSROOT = File.getDOSPath(BIOS.$package.packageRepository) + "ti/sysbios/"
    var romModuleLibDir = File.getDOSPath(RomModule.$package.packageRepository) + RomModule.$name.replace(/\./g, "/") + "/";
    var modName = RomModule.$name.substr(RomModule.$name.lastIndexOf(".")+1);
    var goldenDir = romModuleLibDir.replace(modName, "golden/"+modName);
    
    var RTS = xdc.loadPackage(TARGET.rts);

    var Libs = RTS.getLibs(xdc.module("xdc.cfg.Program"));
    var libsArray = Libs.split(';');
    var XDC_LIB = "";
    for (i in libsArray) {
	XDC_LIB += "-l \"" + XDCROOT + TARGET.rts.replace(/\./g,"/") + "/"
					 + libsArray[i].match(/[^\;]*/) + "\" ";
    }

    /* determine IAR lib config header type: normal or full */
    var profile = Program.build.profile;
    var POPTS = TARGET.profiles[profile].compileOpts.copts;
    POPTS = POPTS.replace("\$(rootDir)",CGEN).replace(/-O[hml][sz ]/, "");
    POPTS = POPTS.replace(/--debug/, "");

    var CMDPREFIX = TARGET.cmdPrefix;

    copy(goldenDir+"romInternFuncs.txt", Build.$private.outputDir+"/romInternFuncs.txt");
%%}

MAKEFLAGS = -j16

RTSLIB = -i`CGEN`/lib/ -llibc.a

XDCLIB = `XDC_LIB`

XOPTS = `'-I"' + XDCRUNTIME + '" ' + '-I"' + XDCROOT + '"' + " -Dxdc_target_types__=" + File.getDOSPath(TARGET.$package.packageRepository) + TARGET.stdInclude + " -Dxdc_target_name__=" + TARGET.name`

vpath % `File.getDOSPath(this.$package.packageRepository) + "ti/sysbios/"`
vpath %.c `XDCROOT`

CCOPTS    = `BIOS.getCCOpts(TARGET.name).replace("\$(rootDir)",CGEN)` `POPTS`

XDC_ROOT  = `XDCROOT`

BIOS_ROOT = `BIOSROOT`

BIOS_DEFS = `Build.getDefs() + ROM.getConfigDefs()`

INTERN_FUNCS = `fileToString(goldenDir+"romInternFuncs.txt")`

BIOS_INC  = -I"`File.getDOSPath(this.$package.packageRepository)`"

TARGET_INC = -I"`File.getDOSPath(xdc.loadPackage('ti.targets').packageRepository)`"

INCS = $(BIOS_INC) $(TARGET_INC) `Build.getIncludePaths()`

CC = `CMDPREFIX` `CGEN`/bin/`TARGET.cc.cmd` $(CCOPTS)
ASM = `CMDPREFIX` `CGEN`/bin/`TARGET.asm.cmd` `TARGET.asm.opts` -S
AR = `CMDPREFIX` `CGEN`/bin/`TARGET.ar.cmd` `TARGET.ar.opts`

%var CCOPTS_LIB = BIOS.getCCOpts(TARGET.name).toString().replace("--opt_for_speed=0","--opt_for_speed=2");
CC_LIB = `CGEN`/bin/`TARGET.cc.cmd` `CCOPTS_LIB` -I `CGEN`/include

%var CCOPTS_PP = BIOS.getCCOpts(TARGET.name).toString().replace(/\-o3/," ");
%CCOPTS_PP = CCOPTS_PP.toString().replace("-Ohs","");
%CCOPTS_PP = CCOPTS_PP.toString().replace("-Ohz","");
%CCOPTS_PP = CCOPTS_PP.toString().replace("-Dti_sysbios_family_arm_m3_Hwi_enableException__D=FALSE","");
%CCOPTS_PP = CCOPTS_PP.toString().replace("-Dti_sysbios_family_arm_m3_Hwi_disablePriority__D=32U","");
%CCOPTS_PP = CCOPTS_PP.toString().replace("\$(rootDir)",CGEN);
CC_PP = `CGEN`/bin/`TARGET.cc.cmd` `CCOPTS_PP` -I `CGEN`/include `POPTS`

%if (environment["os.name"].match(/Windows.*/i)) {
DEL = cmd.exe /q /c del /f
CP = cmd.exe /q /c copy /Y
%}
%else {
DEL = rm -f
CP = cp -f
%}

define RM
	$(if $(wildcard $1),$(DEL) $1,:)
endef

define ASSEMBLE
	@echo asm`TARGET.suffix` $< ...
	@$(ASM) $(BIOS_DEFS) $(XOPTS) $(INCS) $<
endef
%var LIB = "sysbios.a" + TARGET.suffix;
%var ROM_EXEC = "rtos_rom.x" + TARGET.suffix;

all: `LIB`

PHONY: intro
intro:
	@echo Preprocessing library source files ...

%var asmSources = Build.getAsmFiles(TARGET.$name);
%/* 
% * pull in ALL ASM files
% * and mangle the names of the ROM'd APIs in the non-ROM lib.
% */
%for each (var s in asmSources) {
%   var libAsmObj = packageName(s) + "_" + baseName(s) + "_lib.obj";
%   var libAsmFile = packageName(s) + "_" + baseName(s) + "_lib.asm";
%   var asmDir = packageDir(s);
%   LIBASMOBJS.push(libAsmObj)
`libAsmObj`: `s`
	@$(XDC_ROOT)/../xs -c `romModuleLibDir`../mangleAsmFile.xs $(BIOS_ROOT)`s` `libAsmFile` romInternFuncs.txt
	@$(ASM) -o `libAsmObj` -I$(BIOS_ROOT)`asmDir` $(BIOS_DEFS) $(XOPTS) $(INCS) `libAsmFile`

%}

%
%/* 
% * build ALL C files for sysbios.lib
% * and mangle the names of the ROM'd APIs in the non-ROM lib.
% */
%for each (var s in sourcesLIB) {
%   if (s.match(/_config.c/)) {
%       var libPP = baseName(s) + "_lib.pp";
%   }
%   else {
%       var libPP = packageName(s) + "_" + baseName(s) + "_lib.pp";
%   }
%   LIBPPS.push("mangled_" + libPP);
mangled_`libPP`: `s`
	@$(CC_PP) --preprocess=nl `libPP` $(BIOS_DEFS) $(XOPTS) $(INCS) \
	`srcName(s)`
	@$(XDC_ROOT)/../xs -c `romModuleLibDir`../mangleCFile.xs `libPP` mangled_`libPP` romInternFuncs.txt  "$(INTERN_FUNCS)"

%}

%var BIOS_lib_obj = LIBPPS[0].substring(0, LIBPPS[0].lastIndexOf('.')) + ".obj";
`BIOS_lib_obj`: `LIBPPS.join(" ")`
	@echo Creating the SYS/BIOS library that contains the APIs not included in the ROM ...
	@$(CC) -o `BIOS_lib_obj` $(BIOS_DEFS) $(XOPTS) $(INCS) \
%for each (var s in LIBPPS) {
	`s` \
%}

`LIB`: intro `BIOS_lib_obj` `LIBASMOBJS.join(" ")`
	@-$(call RM, $@)
	@$(AR) $@ $(filter-out intro,$^)
	@echo Library build complete.

clean:
	@-$(call RM, *.obj)
