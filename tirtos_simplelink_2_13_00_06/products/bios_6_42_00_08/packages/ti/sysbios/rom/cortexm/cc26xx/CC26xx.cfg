/*
 * Copyright (c) 2014, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== CC26xx.cfg ========
 */

var includeMailbox = true;

/*
 * Set Build.buildROM to true FIRST!
 */
var Build = xdc.useModule('ti.sysbios.Build');
Build.buildROM = true;
Build.buildROMApp = false;

var BIOS = xdc.useModule('ti.sysbios.BIOS');
BIOS.libType = BIOS.LibType_Custom;
BIOS.customCCOpts = BIOS.customCCOpts.replace(" --opt_for_speed=2"," --opt_for_speed=0");
//BIOS.customCCOpts = BIOS.customCCOpts.replace(" --optimize_with_debug","");
BIOS.buildingAppLib = true;  /* required to get best Build.getDefs() behavior */
BIOS.includeXdcRuntime = true;

/* allow Mod_construct() Mod_destruct() */
BIOS.runtimeCreatesEnabled = true;

/* no logging - all compiled out */
BIOS.logsEnabled = false;

/* disable Asserts in SYS/BIOS code */
BIOS.assertsEnabled = false;

/* Clock module will do work in ISR context */
BIOS.swiEnabled = true;

var ROM = xdc.useModule('ti.sysbios.rom.ROM');
var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Types = xdc.useModule('xdc.runtime.Types');
var Timestamp = xdc.useModule('xdc.runtime.Timestamp');

/*
 * Force all ROM'd modules' big.c content into ROM and sysbios.lib files
 */
BIOS.common$.outPolicy = Types.SEPARATE_FILE;

var BIOSRtsGateProxy = xdc.module('ti.sysbios.BIOS_RtsGateProxy');
BIOSRtsGateProxy.common$.outPolicy = Types.SEPARATE_FILE;

var Clock = xdc.useModule('ti.sysbios.knl.Clock');
Clock.common$.outPolicy = Types.SEPARATE_FILE;
var ClockTimerProxy = xdc.module('ti.sysbios.knl.Clock_TimerProxy');
ClockTimerProxy.common$.outPolicy = Types.SEPARATE_FILE;

var Task = xdc.useModule('ti.sysbios.knl.Task');
Task.common$.outPolicy = Types.SEPARATE_FILE;

var TaskSupportProxy = xdc.module('ti.sysbios.knl.Task_SupportProxy');
TaskSupportProxy.common$.outPolicy = Types.SEPARATE_FILE;

if (BIOS.swiEnabled == true) {
    var Swi = xdc.useModule('ti.sysbios.knl.Swi');
    Swi.common$.outPolicy = Types.SEPARATE_FILE;
}

var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
Semaphore.common$.outPolicy = Types.SEPARATE_FILE;

if (includeMailbox) {
    var Mailbox = xdc.useModule('ti.sysbios.knl.Mailbox');
    Mailbox.common$.outPolicy = Types.SEPARATE_FILE;
}

var Queue = xdc.useModule('ti.sysbios.knl.Queue');
Queue.common$.outPolicy = Types.SEPARATE_FILE;

var halHwi = xdc.useModule('ti.sysbios.hal.Hwi');
halHwi.common$.outPolicy = Types.SEPARATE_FILE;
var halHwiProxy = xdc.module('ti.sysbios.hal.Hwi_HwiProxy');
halHwiProxy.common$.outPolicy = Types.SEPARATE_FILE;

var m3Hwi = xdc.useModule('ti.sysbios.family.arm.m3.Hwi');
m3Hwi.common$.outPolicy = Types.SEPARATE_FILE;
var TaskSupport = xdc.useModule('ti.sysbios.family.arm.m3.TaskSupport');
TaskSupport.common$.outPolicy = Types.SEPARATE_FILE;

var GateHwi = xdc.useModule('ti.sysbios.gates.GateHwi');
GateHwi.common$.outPolicy = Types.SEPARATE_FILE;
var GateMutex = xdc.useModule('ti.sysbios.gates.GateMutex');
GateMutex.common$.outPolicy = Types.SEPARATE_FILE;

if (BIOS.includeXdcRuntime == true) {
    var System = xdc.useModule('xdc.runtime.System');
    System.common$.outPolicy = Types.SEPARATE_FILE;

//    System.exitFunc = System.exitSpin;
//    System.abortFunc = System.abortSpin;

    var System_Module_GateProxy = xdc.module('xdc.runtime.System_Module_GateProxy');
    System_Module_GateProxy.common$.outPolicy = Types.SEPARATE_FILE;

    var SysCallback = xdc.useModule('xdc.runtime.SysCallback');
    SysCallback.common$.outPolicy = Types.SEPARATE_FILE;
    SysCallback.abortFxn = null;
    SysCallback.exitFxn = null;
    SysCallback.flushFxn = null;
    SysCallback.putchFxn = null;
    SysCallback.readyFxn = null;

    /* use the minimal user-supplied callback provider */
    System.SupportProxy = SysCallback;

    Timestamp.common$.outPolicy = Types.SEPARATE_FILE;
    var Timestamp_SupportProxy = xdc.module('xdc.runtime.Timestamp_SupportProxy');
    Timestamp_SupportProxy.common$.outPolicy = Types.SEPARATE_FILE;

    var Error = xdc.useModule('xdc.runtime.Error');
    Error.common$.outPolicy = Types.SEPARATE_FILE;

    Error.policyFxn = "&smallErrorPolicy";
    Error.raiseHook = null;
    Error.maxDepth = 2;

    var Text = xdc.useModule('xdc.runtime.Text');
    /* don't load diagnostic/descriptive text strings on the target */
    Text.isLoaded = false;

    /* Optimize the compiled code */
//    ROM.configDefs.$add("-Dxdc_runtime_Text_isLoaded__D=FALSE");

    if (BIOS.runtimeCreatesEnabled) {
	var Memory = xdc.useModule('xdc.runtime.Memory');
	Memory.common$.outPolicy = Types.SEPARATE_FILE;
	var Memory_HeapProxy = xdc.module('xdc.runtime.Memory_HeapProxy');
	Memory_HeapProxy.common$.outPolicy = Types.SEPARATE_FILE;

        var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
        HeapMem.common$.outPolicy = Types.SEPARATE_FILE;
        var HeapMem_Module_GateProxy = xdc.module('ti.sysbios.heaps.HeapMem_Module_GateProxy');
        HeapMem_Module_GateProxy.common$.outPolicy = Types.SEPARATE_FILE;

        var heapMemParams = new HeapMem.Params;
        heapMemParams.size = 64;
        var myHeapMem = HeapMem.create(heapMemParams);

	Memory.defaultHeapInstance = myHeapMem;
    }
    else {
	BIOS.heapSize = 0;
    }

}

/* use the cc26xx Timer and TimestampProvider modules */
var rtcTimer = xdc.useModule('ti.sysbios.family.arm.cc26xx.Timer');
rtcTimer.common$.outPolicy = Types.SEPARATE_FILE;
Clock.TimerProxy = rtcTimer;

var rtcTimestamp = xdc.useModule('ti.sysbios.family.arm.cc26xx.TimestampProvider');
rtcTimestamp.common$.outPolicy = Types.SEPARATE_FILE;
Timestamp.SupportProxy = rtcTimestamp;

if (BIOS.swiEnabled == false) {
    halHwi.dispatcherSwiSupport = false;/* do not pull in Swi */
    m3Hwi.dispatcherSwiSupport = false; /* do not pull in Swi */
}

/* disable exception handling to save Flash - undo during active development */
m3Hwi.enableException = false;
m3Hwi.excHandlerFunc = null; /* avoids pulling in Hwi_excHandlerMin and its text references */

if (false) {
    m3Hwi.nmiFunc = 0;  /* avoids pulling in any exception handler code */
    m3Hwi.nullIsrFunc = 0;  /* avoids pulling in any exception handler code */
    m3Hwi.hardFaultFunc = 0;  /* avoids pulling in any exception handler code */
    m3Hwi.memFaultFunc = 0;  /* avoids pulling in any exception handler code */
    m3Hwi.busFaultFunc = 0;  /* avoids pulling in any exception handler code */
    m3Hwi.usageFaultFunc = 0;  /* avoids pulling in any exception handler code */
    m3Hwi.reservedFunc = 0;  /* avoids pulling in any exception handler code */
    m3Hwi.svCallFunc = 0;  /* avoids pulling in any exception handler code */
    m3Hwi.debugMonFunc = 0;  /* avoids pulling in any exception handler code */
}

m3Hwi.dispatchTableSize = 2;

/* don't check for interrupt stack overflow during Idle loop */
halHwi.initStackFlag = false;  /* avoids pulling in hal Hwi_initStack() */
halHwi.checkStackFlag = false; /* avoids pulling in hal Hwi_checkStack() */

/* don't check stacks for overflow - saves cycles (and power) and Flash */
Task.checkStackFlag = false; /* avoids pulling in Task_checkStacks() */
                             /* also removes all Task HOOK code from library */

/* disable sorting by task priority */
Semaphore.supportsPriority = false;

var SourceDir = xdc.module("xdc.cfg.SourceDir");
SourceDir.verbose = 2;

halHwi.numHooks = 0;    /* Force Hwi hooks to be disabled */
                        /* removes all Hwi HOOK code from library */

/* force ROM and ROM apps to be built against the pg2 driverlibs */
var Boot = xdc.module('ti.sysbios.family.arm.cc26xx.Boot');
Boot.driverlibVersion = 2;
Boot.customerConfig = true;

ROM.configDefs.$add("-Dti_sysbios_knl_Task_deleteTerminatedTasks__D=FALSE");
ROM.configDefs.$add("-Dti_sysbios_knl_Task_checkStackFlag__D=FALSE");
ROM.configDefs.$add("-Dti_sysbios_knl_Clock_TICK_SOURCE=ti_sysbios_knl_Clock_TickSource_TIMER");

xdc.loadCapsule("ti/sysbios/rom/cortexm/cc26xx/CC26xx_externs.xs");

var CC26xx = xdc.useModule('ti.sysbios.rom.cortexm.cc26xx.CC26xx');
CC26xx.module$meta$init();

var appName = Program.name.substring(0, Program.name.lastIndexOf('.'));
if (appName == "CC26xx") {
   CC26xx.templateName = "CC26xx_rom_makefile.xdt";
}
else if (appName == "CC26xx_flash") {
   CC26xx.templateName = "CC26xx_flash_makefile.xdt";
}
else if (appName == "CC26xx_patch") {
   CC26xx.templateName = "CC26xx_patch_makefile.xdt";
}

/*
 * Use Program.sectMaps to force APIs (individual and groups) where we want them to go
 */
/* exclude big.c code */
Program.sectMap[".bigc_text: { " + appName + "_pem3.obj(.text:*) }"] = new Program.SectionSpec();
Program.sectMap[".bigc_text: { " + appName + "_pem3.obj(.text:*) }"].loadSegment = "FLASH";

/* exclude the cc26xx Boot module */
Program.sectMap[".cc26xx_boot_text: { mangled_BIOS_rom.obj(.text:*ti_sysbios_family_arm_cc26xx_Boot*) }"] = new Program.SectionSpec();
Program.sectMap[".cc26xx_boot_text: { mangled_BIOS_rom.obj(.text:*ti_sysbios_family_arm_cc26xx_Boot*) }"].loadSegment = "FLASH";

/* exclude the mangled APIs */
Program.sectMap[".mangled_apis_text: { mangled_BIOS_rom.obj(.text:*__mangled__) }"] = new Program.SectionSpec();
Program.sectMap[".mangled_apis_text: { mangled_BIOS_rom.obj(.text:*__mangled__) }"].loadSegment = "FLASH";

/* place BIOS APIs into RTOS_ROM region */
Program.sectMap[".sysbios_rom_text: { mangled_BIOS_rom.obj(.text:*ti_sysbios*) }"] = new Program.SectionSpec();
Program.sectMap[".sysbios_rom_text: { mangled_BIOS_rom.obj(.text:*ti_sysbios*) }"].loadSegment = "RTOS_ROM";

Program.sectMap[".sysbios_rom_text: { *asm*.obj(.text:*ti_sysbios*) }"] = new Program.SectionSpec();
Program.sectMap[".sysbios_rom_text: { *asm*.obj(.text:*ti_sysbios*) }"].loadSegment = "RTOS_ROM";

/* place our implementations of memset(), memcpy(), atexit() into RTOS_ROM region */
Program.sectMap[".sysbios_rom_text: { " + appName + ".obj(.text:*mem*) }"] = new Program.SectionSpec();
Program.sectMap[".sysbios_rom_text: { " + appName + ".obj(.text:*mem*) }"].loadSegment = "RTOS_ROM";

/* place getRevison into RTOS_ROM region */
Program.sectMap[".sysbios_rom_text: { " + appName + ".obj(.text:*getRevision*) }"] = new Program.SectionSpec();
Program.sectMap[".sysbios_rom_text: { " + appName + ".obj(.text:*getRevision*) }"].loadSegment = "RTOS_ROM";

/* place BIOS config consts into RTOS_FLASH region */
Program.sectMap[".sysbios_rom_const: { *.*(.const:*ti_sysbios*__C) }"] = new Program.SectionSpec();
Program.sectMap[".sysbios_rom_const: { *.*(.const:*ti_sysbios*__C) }"].loadSegment = "RTOS_FLASH";

Program.sectMap[".sysbios_rom_const: { *.*(.const:*ti_sysbios*__O) }"] = new Program.SectionSpec();
Program.sectMap[".sysbios_rom_const: { *.*(.const:*ti_sysbios*__O) }"].loadSegment = "RTOS_FLASH";

/* place BIOS module state objects into RTOS_SRAM region */
Program.sectMap[".sysbios_rom_data: { *.*(.data:*ti_sysbios*state__V) }"] = new Program.SectionSpec();
Program.sectMap[".sysbios_rom_data: { *.*(.data:*ti_sysbios*state__V) }"].loadSegment = "RTOS_SRAM";

/* place external function pointers into RTOS_FLASH region */
Program.sectMap[".sysbios_rom_const: { *.*(.const:*ti_sysbios_rom_ROM*) }"] = new Program.SectionSpec();
Program.sectMap[".sysbios_rom_const: { *.*(.const:*ti_sysbios_rom_ROM*) }"].loadSegment = "RTOS_FLASH";

if (BIOS.includeXdcRuntime == true) {
    /* pull xdc runtime APIs into RTOS_ROM region */
    Program.sectMap[".sysbios_rom_text: { mangled_BIOS_rom.obj(.text:*xdc_runtime*) }"] = new Program.SectionSpec();
    Program.sectMap[".sysbios_rom_text: { mangled_BIOS_rom.obj(.text:*xdc_runtime*) }"].loadSegment = "RTOS_ROM";

    /* pull xdc runtime config consts into RTOS_FLASH region */
    Program.sectMap[".sysbios_rom_const: { *.*(.const:*xdc_runtime*__C) }"] = new Program.SectionSpec();
    Program.sectMap[".sysbios_rom_const: { *.*(.const:*xdc_runtime*__C) }"].loadSegment = "RTOS_FLASH";

    /* pull xdc runtime  module state objects into RTOS_SRAM region */
    Program.sectMap[".sysbios_rom_data: { *.*(.data:*xdc_runtime*state__V) }"] = new Program.SectionSpec();
    Program.sectMap[".sysbios_rom_data: { *.*(.data:*xdc_runtime*state__V) }"].loadSegment = "RTOS_SRAM";
}
