%%{
/*
 * Copyright (c) 2014, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*
 *  ======== FatFS.xdt ========
 */
%%}

#include <stdio.h>

#ifdef __ti__
#include <file.h>
#endif

#include <string.h>

#include <xdc/runtime/Error.h>

#include <ti/sysbios/fatfs/ff.h>
#include <ti/sysbios/fatfs/ffcio.h>
#include <ti/sysbios/fatfs/diskio.h>

extern DRESULT ramdisk_start(BYTE, unsigned char *, int, int);

/*
 *  ======== fatfs_startup ========
 */
Void ti_sysbios_fatfs_startup()
{
%
% /* only create and init ramdisk if user's config specifies to: */
% if (this.ramdiskDriveId != -1) {
%
    DRESULT result = RES_OK;
%
%     if (this.ramdiskSymbolName == "") {
%
    static unsigned char data[`this.ramdiskSize`];

    result = ramdisk_start(`this.ramdiskDriveId`, data, `this.ramdiskSize`, 1);
%
%     }
%     else {
%
    extern unsigned char `this.ramdiskSymbolName`[`this.ramdiskSize`];

    result = ramdisk_start(`this.ramdiskDriveId`, `this.ramdiskSymbolName`, `this.ramdiskSize`, 0);
%
%     }
%

    if (result != RES_OK) {
        xdc_runtime_Error_raise(NULL, xdc_runtime_Error_E_generic, "ramdisk_start failed!", NULL);
    }

%
% }
%
%  /* add_device() should be called once, for all media types */
%
#ifdef __ti__
    add_device("`this.fatfsPrefix`", _MSA, ffcio_open, ffcio_close, ffcio_read,
        ffcio_write, ffcio_lseek, ffcio_unlink, ffcio_rename);
#endif
}

% if (this.getFatTimeHook == null) {

#if defined(__IAR_SYSTEMS_ICC__)
/*
 *  Prevent time() macro in time.h from being used instead of our
 *  generated time() function.
 */
#define _NO_DEFINITIONS_IN_HEADER_FILES 1
#endif

#include <time.h>

#if defined(__IAR_SYSTEMS_ICC__)
#undef _NO_DEFINITIONS_IN_HEADER_FILES
#endif

#include <ti/sysbios/fatfs/ff.h>
%}

/*
 *  ======== fatfs_getFatTime ========
 */
Int32 ti_sysbios_fatfs_getFatTime(Void)
{
%
% if (this.getFatTimeHook == null) {
%
    time_t seconds;
    UInt32 fatTime;
    struct tm *pTime;

    seconds = time(NULL);

    pTime = localtime(&seconds);

% /*
%  *  TI time() returns seconds elapsed since 1900, while other tools
%  *  return seconds from 1970.  However, both TI and GNU localtime()
%  *  sets tm tm_year to number of years since 1900.
%  */
    /*
     *  localtime() sets pTime->tm_year to number of years
     *  since 1900, so subtract 80 from tm_year to get FAT time
     *  offset from 1980.
     */
    fatTime = ((UInt32)(pTime->tm_year - 80) << 25) |
        ((UInt32)(pTime->tm_mon) << 21) |
        ((UInt32)(pTime->tm_mday) << 16) |
        ((UInt32)(pTime->tm_hour) << 11) |
        ((UInt32)(pTime->tm_min) << 5) |
        ((UInt32)(pTime->tm_sec) >> 1);

    return ((Int32)fatTime);
%
% }
% else {
%     var getFatTimeHookName = this.getFatTimeHook.$name;
%     getFatTimeHookName = getFatTimeHookName.replace(/\./g,'_');
%
    /* call user defined get_fattime() hook */
    extern Int32 `getFatTimeHookName`();
    return (`getFatTimeHookName`());
%
% }
%
}
