/*
 * Copyright (c) 2012-2014, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * */

/*
 *  ======== stairstepOneCore.cfg ========
 */
/* ================ XDC Configuration ================ */
/*
 *  The SysStd System provider is a good one to use for debugging
 *  but does not have the best performance. Use xdc.runtime.SysMin
 *  for better performance.
 */
var System   = xdc.useModule('xdc.runtime.System');
var SysStd   = xdc.useModule('xdc.runtime.SysStd');
System.SupportProxy = SysStd;

var Memory      = xdc.useModule('xdc.runtime.Memory');

Timestamp = xdc.useModule('xdc.runtime.Timestamp');
Log = xdc.useModule('xdc.runtime.Log');

/* ================ BIOS Configuration ================ */
BIOS = xdc.useModule('ti.sysbios.BIOS');
Clock = xdc.useModule('ti.sysbios.knl.Clock');
Swi = xdc.useModule('ti.sysbios.knl.Swi');
Task = xdc.useModule('ti.sysbios.knl.Task');
Timer = xdc.useModule('ti.sysbios.hal.Timer');
Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');

/*
 * Build a custom BIOS library.
 *
 * Enabling Swi and Hwi Load statistics requires a custom library. The
 * "instrumented" and "non-instrumented" libraries do not support Hwi or Swi
 * hooks, and the Load module uses hooks to gather the Hwi and Swi Load
 * statistics.
 *
 * The custom library will also be smaller than the pre-built "instrumented"
 * (default) and "non-instrumented" libraries.
 */
BIOS.libType = BIOS.LibType_Custom;

/*
 * Configure a Timer to interrupt every 100ms
 * timerFunc() provides Hwi load and posts a Swi and Semaphore
 * to provide Swi and Task loads.
 * And adjusts the loads every 5 seconds.
 */
var timerParams = new Timer.Params();
timerParams.startMode = Timer.StartMode_AUTO;
timerParams.period = 100000;        /* 100,000 uSecs = 100ms */
var timer0 = Timer.create(Timer.ANY, '&timerFunc', timerParams);

/*
 * Create Semaphore for Task thread to pend on
 */
Program.global.sem = Semaphore.create(0);

/*
 * Create Swi load thread
 */
Program.global.swi = Swi.create('&swiLoad');

/*
 * Create Task load thread
 */
var taskLoadTask = Task.create('&taskLoad');

/*
 *  Enable Swi and Hwi load. This allows the Idle Task
 *  usage to make more sense. Otherwise Hwi and Swi load
 *  is factored into each tasks usage.
 */
var Load = xdc.useModule('ti.sysbios.utils.Load');
Load.swiEnabled = true;
Load.hwiEnabled = true;

/* ================ Logger configuration ================ */
/*
 *  The target Log records are moved to System Analyzer via the UIA ServiceMgr
 *  framework. The physical transport (e.g. TransportType_ETHERNET,
 *  TransportType_FILE, etc.) can be select by the application.
 *  Note: The Ethernet transport uses the NDK.
 *
 *  Configuration done by the application is still honored (e.g. setting
 *  up the common$.diags mask).
 *
 *  Please refer to the ti.uia.sysbios.LoggingSetup module for more
 *  details and configuration options.
 */
var LoggingSetup = xdc.useModule('ti.uia.sysbios.LoggingSetup');
LoggingSetup.eventUploadMode = LoggingSetup.UploadMode_NONJTAGTRANSPORT
var ServiceMgr = xdc.useModule('ti.uia.runtime.ServiceMgr');
ServiceMgr.transportType = ServiceMgr.TransportType_ETHERNET;

/* ================ NDK configuration ================ */
var NdkConfig = xdc.loadPackage('ti.ndk.config');
var Global    = xdc.useModule('ti.ndk.config.Global');
var Ip        = xdc.useModule('ti.ndk.config.Ip');
var Udp       = xdc.useModule('ti.ndk.config.Udp');

/* Configure the NDK for DHCP to dynamically get an IP address */
Ip.dhcpClientMode = Ip.CIS_FLG_IFIDXVALID;
/* To use a fixed IP address instead of DHCP, remove the previous line and uncomment the following line: */
/* Ip.address = "123.456.7.8"; */

/* ================ EVM6472 Specific configuration ================ */
/*
 * If you are using a different board, you need to change the following
 * lines. You'll need to add the Ethernet driver's libraries into the
 * project as specified by the NSP. For example, instead of using
 * the loadPackage() call below, you could have add the following libraries
 * into the Project Build Settings instead
 *
 *     <mcsdk>\packages\ti\platform\lib\platform_utils_evm6472.lib
 *     <mcsdk>\packages\ti\platform\nimu\lib\nimu_eth.lib
 *     <pdk_c64x>\packages\ti\csl\c6472\csl_c6472\lib\csl_c6472.lib
 *     <pdk_c64x>\packages\ti\drv\emac\lib\emac_drv_c6472.lib
 *
 *  where <mcsdk> is the path of the installed MCSDK and
 *        <pdk_c64x> is the path of the installed PDK for C64X
 * See http://processors.wiki.ti.com/index.php/System_Analyzer_Tutorial_3B for details.
 */
/* Use pre-built Ethernet driver supplied with UIA.  */
var ndkdrivers = xdc.loadPackage('ti.uia.examples.evm6472.ndkdrivers');

/* Needed with for the EVM6472 Ethernet driver */
Program.sectMap["emacComm"] = "SL2RAM";

/* Needed since there is not enough LL2 on EVM6472 */
Program.sectMap[".text"]  = "SL2RAM";
