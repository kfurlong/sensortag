/*
 * Copyright (c) 2012-2014, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * */

/* ================ XDC Configuration ================ */
/*
 *  The SysStd System provider is a good one to use for debugging
 *  but does not have the best performance. Use xdc.runtime.SysMin
 *  for better performance.
 */
var System   = xdc.useModule('xdc.runtime.System');
var SysStd   = xdc.useModule('xdc.runtime.SysStd');
System.SupportProxy = SysStd;

var Memory      = xdc.useModule('xdc.runtime.Memory');
Memory.defaultHeapSize = 0x10000;
Program.heap = 0x10000;

Log = xdc.useModule('xdc.runtime.Log');

/* ================ BIOS Configuration ================ */
var BIOS        = xdc.useModule('ti.sysbios.BIOS');
var Task        = xdc.useModule('ti.sysbios.knl.Task');

/* ================ IPC Configuration ================ */
/* Modules explicitly used in the application */
var MessageQ    = xdc.useModule('ti.sdo.ipc.MessageQ');
var Ipc         = xdc.useModule('ti.sdo.ipc.Ipc');
var HeapBufMP   = xdc.useModule('ti.sdo.ipc.heaps.HeapBufMP');

/*
 *  Since this is a single-image example, we don't know (at build-time) which
 *  processor we're building for.  We therefore supply 'null'
 *  as the local procName and use MultiProc_setLocalId to set the procId
 *  at runtime.
 */
var MultiProc = xdc.useModule('ti.sdo.utils.MultiProc');
MultiProc.setConfig(null, ["CORE0", "CORE1", "CORE2",
                           "CORE3", "CORE4", "CORE5"]);

/* Synchronize all processors (this will be done in Ipc_start) */
Ipc.procSync = Ipc.ProcSync_ALL;

/* Shared Memory base address and length */
var SHAREDMEM           = 0x200000;
var SHAREDMEMSIZE       = 0x48000;

/*
 *  Need to define the shared region. The IPC modules use this
 *  to make portable pointers. All processors need to add this
 *  call with their base address of the shared memory region.
 *  If the processor cannot access the memory, do not add it.
 *  NOTE: On c6472, region 0 needs to be placed SL2 RAM because of the
 *  requirement that all GateMP created on this device use SL2 RAM
 *  shared memory.
 */
var SharedRegion = xdc.useModule('ti.sdo.ipc.SharedRegion');
SharedRegion.setEntryMeta(0,
    { base: SHAREDMEM,
      len:  SHAREDMEMSIZE,
      ownerProcId: 0,
      isValid: true,
      cacheLineSize: 64, /* SL2 memory has a cache line size of 64 */
      name: "SL2_RAM",
    });

/* ================ Logger configuration ================ */
/*
 *  The target Log records are moved to System Analyzer via the UIA ServiceMgr
 *  framework. The physical transport (e.g. TransportType_ETHERNET,
 *  TransportType_FILE, etc.) can be select by the application.
 *  Note: The Ethernet transport uses the NDK.
 *
 *  Configuration done by the application is still honored (e.g. setting
 *  up the common$.diags mask).
 *
 *  Please refer to the ti.uia.sysbios.LoggingSetup module for more
 *  details and configuration options.
 */
var LoggingSetup = xdc.useModule('ti.uia.sysbios.LoggingSetup');
LoggingSetup.loggerType = LoggingSetup.LoggerType_RUNMODE;

LoggingSetup.loadLoggerSize = 1024;
LoggingSetup.mainLoggerSize = 32768;
LoggingSetup.sysbiosLoggerSize = 32768;

/* ================ UIA configuration ================ */
/*
 *  The default is to have a single core. This example is a multi-core
 *  example. So UIA must be told to act accordingly.
 */
var ServiceMgr = xdc.useModule('ti.uia.runtime.ServiceMgr');
ServiceMgr.topology = ServiceMgr.Topology_MULTICORE;

/* The application is using the UIA benchmark events. */
var UIABenchmark  = xdc.useModule('ti.uia.events.UIABenchmark');

/* ================ NDK configuration ================ */
var NdkConfig = xdc.loadPackage('ti.ndk.config');
var Global    = xdc.useModule('ti.ndk.config.Global');
var Ip        = xdc.useModule('ti.ndk.config.Ip');
var Udp       = xdc.useModule('ti.ndk.config.Udp');

/* Configure the NDK for DHCP to dynamically get an IP address */
Ip.dhcpClientMode = Ip.CIS_FLG_IFIDXVALID;
/* To use a fixed IP address instead of DHCP, remove the previous line and uncomment the following line: */
/* Ip.address = "123.456.7.8"; */

/* ================ EVM6472 Specific configuration ================ */
/*
 * If you are using a different board, you need to change the following
 * lines. You'll need to add the Ethernet driver's libraries into the
 * project as specified by the NSP. For example, instead of using
 * the loadPackage below, you could have added the libraries instead.
 * See http://processors.wiki.ti.com/index.php/System_Analyzer_Tutorial_3B for details.
 */
/* Use pre-built Ethernet driver supplied with UIA.  */
var ndkdrivers = xdc.loadPackage('ti.uia.examples.evm6472.ndkdrivers');

/* Needed for the EVM6472 Ethernet driver */
Program.sectMap["emacComm"] = "SL2RAM";

/* Needed since there is not enough LL2 on EVM6472 */
Program.sectMap[".text"]  = "SL2RAM";
