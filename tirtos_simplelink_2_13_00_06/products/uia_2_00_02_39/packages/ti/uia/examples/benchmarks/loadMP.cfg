/*
 * Copyright (c) 2012-2014, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * */

/*
 *  ======== loadMP.cfg ========
 */

/* ================ XDC Configuration ================ */
/*
 *  The SysStd System provider is a good one to use for debugging
 *  but does not have the best performance. Use xdc.runtime.SysMin
 *  for better performance.
 */
var System   = xdc.useModule('xdc.runtime.System');
var SysStd   = xdc.useModule('xdc.runtime.SysStd');
System.SupportProxy = SysStd;

Timestamp = xdc.useModule('xdc.runtime.Timestamp');
Log = xdc.useModule('xdc.runtime.Log');

/* ================ BIOS Configuration ================ */
var BIOS        = xdc.useModule('ti.sysbios.BIOS');
var Clock     = xdc.useModule('ti.sysbios.knl.Clock');
var Task        = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore   = xdc.useModule('ti.sysbios.knl.Semaphore');

/* Task that generates load */
var params = new Task.Params;
params.priority = 10;
params.instance.name = "taskLoad";
var taskLoad = Task.create('&taskLoad', params);

/* Semaphore that Clock function posts to release taskLoad */
var params = new Semaphore.Params;
params.mode = Semaphore.Mode_BINARY;
params.instance.name = "taskLoad Sem";
Program.global.loadSem = Semaphore.create(0, params);

/* Clock to release the task that generates load */
var clockParams = new Clock.Params();
clockParams.period = 1;
clockParams.startFlag = true;
/* Comment out the next line if you do not want to generate load */
Clock.create("&releaseTaskLoad", clockParams.period, clockParams);

/* ================ Board Specific ================ */
Program.sectMap[".text"]  = "SL2RAM";

var Memory      = xdc.useModule('xdc.runtime.Memory');
Memory.defaultHeapSize = 0x10000;
Program.heap = 0x10000;

/* ================ IPC Configuration ================ */
/* Modules explicitly used in the application */
var Ipc         = xdc.useModule('ti.sdo.ipc.Ipc');

/*
 *  Since this is a single-image example, we don't know (at build-time) which
 *  processor we're building for.  We therefore supply 'null'
 *  as the local procName and use MultiProc_setLocalId to set the procId
 *  at runtime.
 */
var MultiProc = xdc.useModule('ti.sdo.utils.MultiProc');
MultiProc.setConfig(null, ["CORE0", "CORE1", "CORE2",
                           "CORE3", "CORE4", "CORE5"]);

/* Synchronize all processors (this will be done in Ipc_start) */
Ipc.procSync = Ipc.ProcSync_ALL;

/* Shared Memory base address and length */
var SHAREDMEM           = 0x200000;
var SHAREDMEMSIZE       = 0x48000;

/*
 *  Need to define the shared region. The IPC modules use this
 *  to make portable pointers. All processors need to add this
 *  call with their base address of the shared memory region.
 *  If the processor cannot access the memory, do not add it.
 *  NOTE: On c6472, region 0 needs to be placed SL2 RAM because of the
 *  requirement that all GateMP created on this device use SL2 RAM
 *  shared memory.
 */
var SharedRegion = xdc.useModule('ti.sdo.ipc.SharedRegion');
SharedRegion.setEntryMeta(0,
    { base: SHAREDMEM,
      len:  SHAREDMEMSIZE,
      ownerProcId: 0,
      isValid: true,
      cacheLineSize: 64, /* SL2 memory has a cache line size of 64 */
      name: "SL2_RAM",
    });

/* ================ Logger configuration ================ */
/*
 *  Creating 2 logger instances.
 *  - One for Load events. We want to make sure none are dropped.
 *    It can be relatively small, since there are not many events.
 *  - One everyone else. This needs to be bigger since we are enabling
 *    BIOS context switches events and have Log_write in the application.
 */
var LoggerRunMode = xdc.useModule('ti.uia.loggers.LoggerRunMode');
var Diags         = xdc.useModule('xdc.runtime.Diags');
var Defaults      = xdc.useModule('xdc.runtime.Defaults');
var Main          = xdc.useModule('xdc.runtime.Main');
var Load          = xdc.useModule('ti.sysbios.utils.Load');

/* Give the Load module it's own logger. */
var loggerParams = new LoggerRunMode.Params();
loggerParams.bufSize = 65536;
var loadLog = LoggerRunMode.create(loggerParams);
loadLog.instance.name = "Load Logger";
Load.common$.logger = loadLog;

/* Enable the Load module to log events */
Load.common$.diags_USER4 = Diags.ALWAYS_ON;

/* Set the default logger for all modules. */
Defaults.common$.logger = loadLog;

/* Main's Log calls */
Main.common$.diags_ANALYSIS = Diags.ALWAYS_ON;  /* Enable INFO events */

/* Turn on BIOS' context switches events */
Defaults.common$.diags_USER1 = Diags.ALWAYS_ON; /* Enable INFO events */

/* ================ UIA configuration ================ */
/*
 * By including Rta, Log records will be collected and send to the
 * instrumentation host (once it is connected and started).
 */
var Rta        = xdc.useModule('ti.uia.services.Rta');

/*
 *  The default is to have a single core. This example is a multi-core
 *  example. So UIA must be told to act accordingly.
 */
var ServiceMgr = xdc.useModule('ti.uia.runtime.ServiceMgr');
ServiceMgr.topology = ServiceMgr.Topology_MULTICORE;
ServiceMgr.numEventPacketBufs = 10;

/* The application is using the UIA benchmark events. */
var UIABenchmark  = xdc.useModule('ti.uia.events.UIABenchmark');

/* ================ NDK configuration ================ */
var NdkConfig = xdc.loadPackage('ti.ndk.config');
var Global    = xdc.useModule('ti.ndk.config.Global');
var Ip        = xdc.useModule('ti.ndk.config.Ip');
var Udp       = xdc.useModule('ti.ndk.config.Udp');

Ip.dhcpClientMode = Ip.CIS_FLG_IFIDXVALID;

/*
 *  Use pre-built Ethernet driver supplied with UIA.
 *  Longer term, use official driver and just remove this line...
 */
var ndkdrivers = xdc.loadPackage('ti.uia.examples.evm6472.ndkdrivers');

/* Needed with for the driver */
Program.sectMap["emacComm"] = "SL2RAM";
