/*
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * */
/*
 *  ======== videoM3LoggerCircBuf.cfg ========
 */

var BIOS = xdc.useModule('ti.sysbios.BIOS');

/* ================ Board Specific ================ */
var Memory    = xdc.useModule('xdc.runtime.Memory');

/* Required by run BIOS on M3VIDEO (core 0) */
var Core = xdc.useModule('ti.sysbios.family.arm.ducati.Core');
Core.id = 0;

Memory.defaultHeapSize = 0x8000;
Program.heap           = 0x8000;

/* work around for SDOCM00078410 */
xdc.useModule('ti.sysbios.family.arm.ducati.TimestampProvider');

var AMMU = xdc.useModule('ti.sysbios.hal.ammu.AMMU');

AMMU.largePages[1].pageEnabled = AMMU.Enable_YES;
AMMU.largePages[1].logicalAddress = 0x80000000;
AMMU.largePages[1].translatedAddress = 0x80000000;
AMMU.largePages[1].translationEnabled = AMMU.Enable_YES;
AMMU.largePages[1].size = AMMU.Large_512M;
AMMU.largePages[1].volatileQualifier = AMMU.Volatile_FOLLOW;

AMMU.largePages[1].L1_cacheable = AMMU.CachePolicy_CACHEABLE;
AMMU.largePages[1].L1_posted = AMMU.PostedPolicy_NON_POSTED;
AMMU.largePages[1].L2_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
AMMU.largePages[1].L2_posted = AMMU.PostedPolicy_NON_POSTED;

AMMU.largePages[2].pageEnabled = AMMU.Enable_YES;
AMMU.largePages[2].logicalAddress = 0x40000000;
AMMU.largePages[2].translatedAddress = 0x40000000;
AMMU.largePages[2].translationEnabled = AMMU.Enable_YES;
AMMU.largePages[2].size = AMMU.Large_512M;

var Cache = xdc.useModule('ti.sysbios.hal.unicache.Cache');
Cache.enableCache = true;

/* Load the common configuration */
var MultiProc = xdc.useModule('ti.sdo.utils.MultiProc');
MultiProc.setConfig("VIDEO-M3", ["DSP", "VIDEO-M3", "VPSS-M3", "HOST"]);
xdc.loadCapsule("ti/uia/examples/evmti816x/simpleTask.cfg.xs");

/* ================ Logger configuration ================ */
/*
 *  Create a LoggerSM instance and use it as a status logger.
 *  Make sure it is at the same address (0x8F000000) for
 *  all cores (DSP, Video, VPSS). All cores will
 *  share this same memory.
 */
var LoggerSM = xdc.useModule('ti.uia.runtime.LoggerSM');
LoggerSM.partitionId = MultiProc.id;
LoggerSM.bufSection = ".loggerSM";
LoggerSM.sharedMemorySize = 0x20000;
LoggerSM.numPartitions = 3;
var statusLogger = LoggerSM.create();

/*
 *  Make sure the section is in LOGGERSM (defined in
 *  ti\uia\examples\platforms\evmti816x). Also make sure
 *  it is a NOLOAD section. This avoids wiping out another
 *  cores logger memory when more than one cores is loaded.
 */
Program.sectMap[".loggerSM"] = new Program.SectionSpec();
Program.sectMap[".loggerSM"].loadSegment = "LOGGERSM";
Program.sectMap[".loggerSM"].type = "NOLOAD";

/*
 *  Plug the LoggerSM logger into LoggerCircBuf. All STATUS events
 *  and Load records will go to the LoggerSM instance
 */
LoggerCircBuf = xdc.useModule('ti.uia.runtime.LoggerCircBuf');
LoggerCircBuf.statusLogger = statusLogger;
LoggerCircBuf.filterByLevel = true;
LoggerCircBuf.moduleToRouteToStatusLogger = "ti.sysbios.utils.Load";

/*
 *  Use LoggingSetup which uses UploadMode_JTAGSTOPMODE as the
 *  default. Increase the Log sizes.
 *
 *  Configuration done by the application is still honored (e.g. setting
 *  up the common$.diags mask).
 *
 *  Please refer to the ti.uia.sysbios.LoggingSetup module for more
 *  details and configuration options.
 */
var LoggingSetup = xdc.useModule('ti.uia.sysbios.LoggingSetup');
LoggingSetup.loadLoggerSize = 1024;
LoggingSetup.mainLoggerSize = 32768;
LoggingSetup.sysbiosLoggerSize = 32768;

/* Use the a transport to move the records to System Analyzer */
LoggingSetup.eventUploadMode = LoggingSetup.UploadMode_NONJTAGTRANSPORT;

/* ================ UIA configuration ================ */
/*
 *  The default is to have a single core. This example is a multi-core
 *  example. So UIA must be told to act accordingly.
 */
var ServiceMgr = xdc.useModule('ti.uia.runtime.ServiceMgr');
ServiceMgr.topology = ServiceMgr.Topology_MULTICORE;
ServiceMgr.transportType = ServiceMgr.TransportType_NULL;

/* The HOST is the master UIA processors */
ServiceMgr.masterProcId = 3;

/* The application is using the UIA benchmark events. */
var UIABenchmark  = xdc.useModule('ti.uia.events.UIABenchmark');
